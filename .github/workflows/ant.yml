name: Java CI

on:
  workflow_call:
    inputs:
      josm-revision:
        type: string
        default: ''
        description: The JOSM revision to use. May be empty (''), 'latest', 'tested', or 'rNUMBER' ('r10000')
        required: false
      operating-system:
        type: string
        default: ubuntu-latest
        description: The operating system to run on
        required: false
      java-version:
        type: number
        default: 11
        description: The java version to build against
        required: false
      java-distribution:
        type: string
        default: temurin
        description: The java distribution to build against
        required: false
      plugin-directory:
        type: string
        default: ${{ github.event.repository.name }}
        required: false
        description: "A variable used for developing the GitHub Action. We change directory to this prior to running build actions."
      plugin-jar-name:
        type: string
        default: ${{ github.event.repository.name }}
        description: "The base name of the jar file, if not the repository name. Only useful in conjunction with `update-pluginssource`."
        required: false
      ant-version:
        type: string
        default: 'apache-ant-1.10.15'
      perform-revision-tagging:
        type: boolean
        default: false
        required: false
        description: "Set to true if you want to automatically tag every push to the main branch for use with releasing"
      revision-offset:
        type: number
        default: 0
        required: false
        description: "Set to an offset for automatic tagging. For example, if the last plugin version was 100, but there are only 20 commits, then this should be 80"
      repository:
        type: string
        default: ${{ github.repository }}
        required: false
        description: "A variable used for developing the GitHub Action. See actions/checkout@v4."
      ref:
        type: string
        default: ''
        required: false
        description: "A variable used for developing the GitHub Action. See actions/checkout@v4."
    outputs:
      tag:
        description: "The release tag"
        value: ${{ jobs.create_tag.outputs.revision }}
      plugin_directory:
        description: "The directory that the plugin has been cloned into"
        value: ${{ jobs.plugin-build.outputs.plugin_directory }}

jobs:
  josm-build:
    runs-on: ${{ inputs.operating-system }}
    outputs:
      josm-revision: ${{ steps.josm-build.outputs.josm-revision }}
      josm-test-revision: ${{ steps.josm-build.outputs.josm-test-revision }}
    steps:
    - name: Install subversion
      run: |
        if [ -z "$(which svn)" ] && [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt-get update && sudo apt-get install -y subversion
        fi
    - uses: actions/setup-java@v4
      with:
        distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}
    - id: josm-build
      uses: JOSM/JOSMPluginAction/actions/josm_build@v3
      with:
        josm-revision: ${{ inputs.josm-revision }}

  create_tag:
    runs-on: ${{ inputs.operating-system }}
    outputs:
      revision: ${{ steps.create_revision.outputs.revision }}
    steps:
      - uses: actions/checkout@v4
        if: ${{ inputs.perform-revision-tagging }}
        with:
          fetch-depth: 0
          repository: '${{ inputs.repository }}'
          ref: '${{ inputs.ref }}'
      - name: Set revision env variable
        if: ${{ inputs.perform-revision-tagging }}
        id: create_revision
        # Count the total commits for this branch
        run: |
          revision="v$(($(git rev-list --count HEAD) + ${{ inputs.revision-offset }}))"
          if [ $(git tag | grep '^'"$revision"'$' | wc -l) -eq 0 ]; then
            git tag $revision
            git push -u origin $revision
          elif [ $(git diff ${{ github.sha }}..$revision --name-only | wc -l) -ne 0 ]; then
            echo "Already existing tag pointing to different revision"
            exit 1
          fi
          echo "revision=$revision" >> $GITHUB_OUTPUT

  plugin-build:
    runs-on: ${{ inputs.operating-system }}
    needs: [josm-build, create_tag]
    outputs:
      plugin_directory: ${{ steps.version.outputs.plugin_directory }}
    permissions:
      id-token: write
      attestations: write
    steps:
    - name: Install subversion
      run: |
        if [ -z "$(which svn)" ] && [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt-get update && sudo apt-get install -y subversion
        fi
    - uses: JOSM/JOSMPluginAction/actions/setup-ant@v3
      with:
        ant-version: ${{ inputs.ant-version }}
    - uses: JOSM/JOSMPluginAction/actions/plugin_clone@v3
      with:
        java-distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}
        josm-revision: ${{ needs.josm-build.outputs.josm-revision }}
        josm-test-revision: ${{ needs.josm-build.outputs.josm-test-revision }}
        plugin-jar-name: ${{ inputs.plugin-jar-name }}
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        plugin-directory: ${{ inputs.plugin-directory }}
        fetch-depth: 50
    - name: Set version information
      id: version
      run: |
        cd $GITHUB_WORKSPACE/josm/plugins/${{ inputs.plugin-directory }}
        if [ $GITHUB_REF_TYPE == "tag" ]; then
          echo "Set version to tag"
          version=$GITHUB_REF_NAME
        else
          echo "Extract version"
          version="$(git describe --tags --always --dirty --broken)"
        fi
        echo "Type $GITHUB_REF_TYPE Name $GITHUB_REF_NAME version full ${version#v} version ${version}"
        echo "version=${version#v}" >> $GITHUB_OUTPUT
        echo "plugin_directory=josm/plugins/${{ inputs.plugin-directory }}" >> $GITHUB_OUTPUT

    - name: Build with Ant
      id: build-ant
      # Don't build with ant if we can build with maven
      if: ${{ hashFiles(format('josm/plugins/{0}/build.xml', inputs.plugin-directory)) != ''  && hashFiles(format('josm/plugins/{0}/pom.xml', inputs.plugin-directory)) == ''}}
      run: |
        # Note: This should be deprecated at some point.
        cd $GITHUB_WORKSPACE/josm/plugins/${{ inputs.plugin-directory }}
        ant -noinput -buildfile build.xml -Dplugin.version=${{ steps.version.outputs.version }}

    - name: Build with maven
      if: ${{ hashFiles(format('josm/plugins/{0}/pom.xml', inputs.plugin-directory)) != '' }}
      run: |
        set -ex
        cd $GITHUB_WORKSPACE/josm/plugins/${{ inputs.plugin-directory }}
        svn up ../../core/tools
        ls ../..
        ls ../../core
        ls ../../core/tools
        ls ../../core/tools/checkstyle
        mvn --file pom.xml --no-transfer-progress package javadoc:jar source:jar -DskipTests -Dplugin.dist.dir=../../dist -Dplugin.version=${{ steps.version.outputs.version }}
        mv target/${{ inputs.plugin-jar-name }}-*-sources.jar ../../dist/${{ inputs.plugin-jar-name }}-sources.jar
        mv target/${{ inputs.plugin-jar-name }}-*-javadoc.jar ../../dist/${{ inputs.plugin-jar-name }}-javadoc.jar

    - name: Perform attestation
      if: ${{ startsWith(github.ref, 'refs/tags/') || inputs.perform-revision-tagging }}
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: |
          josm/dist/${{ inputs.plugin-jar-name }}.jar
          josm/dist/${{ inputs.plugin-jar-name }}-sources.jar
          josm/dist/${{ inputs.plugin-jar-name }}-javadoc.jar

    - name: Upload plugin build
      id: cache-plugin-build
      uses: actions/upload-artifact@v4
      with:
        name: plugin-build-${{ inputs.java-version }}-${{ needs.josm-build.outputs.josm-revision }}
        path: |
          josm/dist/${{ inputs.plugin-jar-name }}.jar
          josm/dist/${{ inputs.plugin-jar-name }}-javadoc.jar
          josm/dist/${{ inputs.plugin-jar-name }}-sources.jar

  plugin-test:
    runs-on: ${{ inputs.operating-system }}
    needs: [josm-build, plugin-build]
    steps:
    - name: Install subversion
      run: |
        if [ -z "$(which svn)" ] && [ "${{ runner.os }}" == "Linux" ]; then
          sudo apt-get update && sudo apt-get install -y subversion
        fi
    - uses: JOSM/JOSMPluginAction/actions/setup-ant@v3
      with:
        ant-version: ${{ inputs.ant-version }}
    - uses: JOSM/JOSMPluginAction/actions/plugin_clone@v3
      with:
        java-distribution: ${{ inputs.java-distribution }}
        java-version: ${{ inputs.java-version }}
        josm-revision: ${{ needs.josm-build.outputs.josm-revision }}
        josm-test-revision: ${{ needs.josm-build.outputs.josm-test-revision }}
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}
        plugin-directory: ${{ inputs.plugin-directory }}

    - name: Check if ivy.xml exists
      id: ivy-file-check
      run: |
        if [ -f "josm/plugins/${{ inputs.plugin-directory }}/ivy.xml" ]; then
          echo "ivy-xml=true" >> $GITHUB_OUTPUT
        else
          echo "ivy-xml=false" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Cache plugin test dependencies
      id: cache-plugin-test-dependencies
      if: steps.ivy-file-check.outputs.ivy-xml == 'true'
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-${{ runner.arch }}-ivy-plugin-test-${{ hashFiles('**/ivy.xml') }}
        path: |
          ~/.ivy2/cache/
          ~/.ant/cache

    - name: Test
      run: |
        cd $GITHUB_WORKSPACE/josm/plugins/${{ inputs.plugin-directory }}
        # Not all plugins have tests.
        if [ -d "test" ]; then TEST_REPORT_PATH="test/report"; elif [ -d "src/test" ]; then TEST_REPORT_PATH="src/test/report"; else exit 0; fi
        
        if [ -f "pom.xml" ]; then
          echo "TEST_REPORT_PATH=target/surefire-reports" >> $GITHUB_ENV
          mvn --no-transfer-progress test
        elif [ -f "build.xml" ]; then
          echo "TEST_REPORT_PATH=${TEST_REPORT_PATH}" >> $GITHUB_ENV
          ant -diagnostics
          ant -noinput -buildfile build.xml -Dplugin.version=$version -Dtest.headless=true test
        else
          # Fail since we don't have a build target.
          exit 1
        fi

    - name: Upload Ant reports
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: Ant reports for JOSM plugin ${{ inputs.plugin-directory }}-${{ inputs.java-version }}-${{ needs.josm-build.outputs.josm-revision }}
        path: |
          josm/plugins/${{ inputs.plugin-directory }}/${{ env.TEST_REPORT_PATH }}/*.txt
          josm/plugins/${{ inputs.plugin-directory }}/${{ env.TEST_REPORT_PATH }}/TEST*.xml
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v4
      if: always() # always run even if the previous step fails
      with:
        report_paths: 'josm/plugins/${{ inputs.plugin-directory }}/${{ env.TEST_REPORT_PATH }}/TEST*.xml'
        fail_on_failure: true

  release:
    runs-on: ${{ inputs.operating-system }}
    needs: [create_tag, plugin-build, plugin-test, josm-build]
    if: ${{ startsWith(github.ref, 'refs/tags/') || inputs.perform-revision-tagging }}
    steps:
    - name: Get build
      id: cache-plugin-build
      uses: actions/download-artifact@v4
      with:
        name: plugin-build-${{ inputs.java-version }}-${{ needs.josm-build.outputs.josm-revision }}
    - name: Set revision env variable
      id: create_revision
      run: |
        if [[ ! -z "${{ needs.create_tag.outputs.revision }}" ]]; then
          revision="${{ needs.create_tag.outputs.revision }}"
        else
          revision="${{ github.ref_name }}"
        fi
        echo "revision=$revision" >> $GITHUB_OUTPUT
        echo "revision_number=${revision#v}" >> $GITHUB_OUTPUT

    - name: Generate update site
      id: create_update_site
      run: |
        jarname="${{ inputs.plugin-jar-name }}.jar"
        jarurl="https://github.com/${{ github.repository }}/releases/download/${{ steps.create_revision.outputs.revision }}/${jarname}"
        echo "${jarname};$jarurl" > updatesite
        unzip -p "${jarname}" META-INF/MANIFEST.MF | sed 's/^/\t/' >> updatesite
    - name: Release
      run: |
        ls -R .
        target="${{ steps.create_revision.outputs.revision }}"
        if [ -z "$(gh --repo ${{ github.repository }} release view \"${target}\")" ]; then
          gh release --repo ${{ github.repository }} create "${target}" \
            --title "${target}" \
            --latest \
            --generate-notes
        fi
        gh release --repo ${{ github.repository }} upload --clobber "${target}" \
          "${{ inputs.plugin-jar-name }}.jar" \
          "${{ inputs.plugin-jar-name }}-javadoc.jar" \
          "${{ inputs.plugin-jar-name }}-sources.jar" \
          "updatesite"
      env:
        GH_TOKEN: ${{ github.token }}
